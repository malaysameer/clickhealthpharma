openapi: 3.0.1
info:
  title: Users & Roles API
  version: 1.0.0
  description: Manage system users and role-based access control.
security:
  - bearerAuth: []
paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      operationId: listUsers
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Users
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      tags:
        - Users
      summary: Update user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: Updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      tags:
        - Users
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /roles:
    get:
      tags:
        - Users
      summary: List all roles
      operationId: listRoles
      responses:
        '200':
          description: All roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    User:
      type: object
      required: [username, role, password]
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
        pharmacyId:
          type: integer
        lastLoginAt:
          type: string
          format: date-time
          readOnly: true
        failedLoginAttempts:
          type: integer
          format: int32
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        createdBy:
          type: string
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        updatedBy:
          type: string
          readOnly: true
    CreateUserRequest:
      type: object
      required:
        - username
        - password
        - role
      properties:
        username:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [ ADMIN, PHARMACIST, ASSISTANT ]  # Example roles
        status:
          type: string
          enum: [ ACTIVE, INACTIVE ]              # Example statuses
        pharmacyId:
          type: integer
    Role:
      type: string
      enum: [ADMIN, PHARMACIST, CASHIER, MANAGER]
