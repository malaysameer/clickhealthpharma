/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.clickhealth.pharma.purchase.api;

import com.clickhealth.pharma.purchase.model.CreatePurchaseRequest;
import com.clickhealth.pharma.purchase.model.Purchase;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-07T11:32:50.093250446+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "purchases", description = "the purchases API")
public interface PurchasesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /purchases : Record a new purchase
     *
     * @param createPurchaseRequest  (required)
     * @return Purchase recorded (status code 201)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "createPurchase",
        summary = "Record a new purchase",
        responses = {
            @ApiResponse(responseCode = "201", description = "Purchase recorded"),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/purchases",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createPurchase(
        @Parameter(name = "CreatePurchaseRequest", description = "", required = true) @Valid @RequestBody CreatePurchaseRequest createPurchaseRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /purchases/{id} : Get purchase by ID
     *
     * @param id  (required)
     * @return Purchase found (status code 200)
     *         or Not found (status code 404)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "getPurchaseById",
        summary = "Get purchase by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Purchase found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Purchase.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found"),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/purchases/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Purchase> getPurchaseById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalAmount\" : 1.4658129805029452, \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"purchaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"supplierId\" : 6, \"updatedBy\" : \"updatedBy\", \"createdBy\" : \"createdBy\", \"id\" : 0, \"items\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"quantity\" : 5, \"cost\" : 2.3021358869347655, \"updatedBy\" : \"updatedBy\", \"createdBy\" : \"createdBy\", \"medicineId\" : 5, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"quantity\" : 5, \"cost\" : 2.3021358869347655, \"updatedBy\" : \"updatedBy\", \"createdBy\" : \"createdBy\", \"medicineId\" : 5, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /purchases : Get all purchase records
     *
     * @return List of purchases (status code 200)
     *         or Access token is missing or invalid (status code 401)
     */
    @Operation(
        operationId = "listPurchases",
        summary = "Get all purchase records",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of purchases", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Purchase.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/purchases",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Purchase>> listPurchases(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"totalAmount\" : 1.4658129805029452, \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"purchaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"supplierId\" : 6, \"updatedBy\" : \"updatedBy\", \"createdBy\" : \"createdBy\", \"id\" : 0, \"items\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"quantity\" : 5, \"cost\" : 2.3021358869347655, \"updatedBy\" : \"updatedBy\", \"createdBy\" : \"createdBy\", \"medicineId\" : 5, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"quantity\" : 5, \"cost\" : 2.3021358869347655, \"updatedBy\" : \"updatedBy\", \"createdBy\" : \"createdBy\", \"medicineId\" : 5, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"totalAmount\" : 1.4658129805029452, \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"purchaseDate\" : \"2000-01-23T04:56:07.000+00:00\", \"supplierId\" : 6, \"updatedBy\" : \"updatedBy\", \"createdBy\" : \"createdBy\", \"id\" : 0, \"items\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"quantity\" : 5, \"cost\" : 2.3021358869347655, \"updatedBy\" : \"updatedBy\", \"createdBy\" : \"createdBy\", \"medicineId\" : 5, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"quantity\" : 5, \"cost\" : 2.3021358869347655, \"updatedBy\" : \"updatedBy\", \"createdBy\" : \"createdBy\", \"medicineId\" : 5, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
